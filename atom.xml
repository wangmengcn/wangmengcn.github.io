<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[搬砖工的日常]]></title>
  <subtitle><![CDATA[搬砖路上有你有我]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://eclipsesv.com//"/>
  <updated>2015-08-02T13:44:48.466Z</updated>
  <id>http://eclipsesv.com//</id>
  
  <author>
    <name><![CDATA[wm]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[服务器端缓存环境配置(二)]]></title>
    <link href="http://eclipsesv.com/2015/08/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%BC%93%E5%AD%98%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-%E4%BA%8C/"/>
    <id>http://eclipsesv.com/2015/08/02/服务器端缓存环境配置-二/</id>
    <published>2015-08-02T11:14:56.000Z</published>
    <updated>2015-08-02T13:44:48.466Z</updated>
    <content type="html"><![CDATA[<p>上一篇博客讲解了整个缓存流程中数据库部分的搭建，有了最基础的部分，现在可以搭建上层的内容了。</p>
<a id="more"></a>
<h1 id="Web服务器"><strong>Web服务器</strong></h1><p>整个缓存流程中，客户端都是以HTTP请求的方式获取服务器上数据库中的数据。我们选择了Nginx作为HTTP请求解析和负载均衡的工具。<br>Nginx作为一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP 代理服务器。它以稳定性、丰富的功能和第系统资源消耗而闻名。下面开始介绍Nginx的安装和配置：<br>以往的安装方式都是直接编译源码，这次来点新的。</p>
<h2 id="Ngxin打包安装">Ngxin打包安装</h2><p>按照<a href="http://nginx.org/en/linux_packages.html" target="_blank" rel="external">nginx官网</a>上的方法来进行操作。<br>首先打开终端，进入/usr/local目录，下载rpm文件：</p>
<pre><code>[wangmeg<span class="constant">@localhost</span> ~]$ cd /usr/<span class="keyword">local</span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-    release-centos-7-0.el7.ngx.noarch.rpm</span>
</code></pre><p>之后安装rpm文件，并使用yum 命令进行Nginx的自动安装：</p>
<pre><code>[root<span class="variable">@localhost</span> <span class="keyword">local</span>]<span class="comment"># rpm -i nginx-release-centos-7-0.el7.ngx.noarch.rpm </span>
[root<span class="variable">@localhost</span> <span class="keyword">local</span>]<span class="comment"># yum install nginx</span>
</code></pre><p>稍等片刻，终端出现</p>
<pre><code>----------------------------------------------------------------------

Thanks <span class="keyword">for</span> <span class="keyword">using</span> nginx!

Please find the official documentation <span class="keyword">for</span> nginx here:
* http:<span class="comment">//nginx.org/en/docs/</span>

Commercial subscriptions <span class="keyword">for</span> nginx are available on:
* http:<span class="comment">//nginx.com/products/</span>

----------------------------------------------------------------------
  Verifying  : <span class="number">1</span>:nginx-<span class="number">1.8</span><span class="number">.0</span>-<span class="number">1.</span>el7.ngx.x86_64                               <span class="number">1</span>/<span class="number">1</span> 

Installed:
  nginx.x86_64 <span class="number">1</span>:<span class="number">1.8</span><span class="number">.0</span>-<span class="number">1.</span>el7.ngx                                                

Complete!
</code></pre><p>表示Nginx安装完毕。现在，在终端键入命令nginx启动nginx，在浏览器中输入http:127.0.0.1之后出现<br><img src="http://7xkswi.com1.z0.glb.clouddn.com/eclipsesv_jpgScreenshot%20from%202015-08-02%2020%3A29%3A42.png" alt=""><br>这样，Nginx就算安装完毕了。<br>可以在终端键入命令： nginx -V 来查看这样默认安装的相关配置。</p>
<pre><code><span class="title">[</span><span class="comment">root@localhost</span> <span class="comment">local</span><span class="title">]</span><span class="comment">#</span> <span class="comment">nginx</span> <span class="literal">-</span><span class="comment">V</span>
<span class="comment">nginx</span> <span class="comment">version:</span> <span class="comment">nginx/1</span><span class="string">.</span><span class="comment">8</span><span class="string">.</span><span class="comment">0</span>
<span class="comment">built</span> <span class="comment">by</span> <span class="comment">gcc</span> <span class="comment">4</span><span class="string">.</span><span class="comment">8</span><span class="string">.</span><span class="comment">2</span> <span class="comment">20140120</span> <span class="comment">(Red</span> <span class="comment">Hat</span> <span class="comment">4</span><span class="string">.</span><span class="comment">8</span><span class="string">.</span><span class="comment">2</span><span class="literal">-</span><span class="comment">16)</span> <span class="comment">(GCC)</span> 
<span class="comment">built</span> <span class="comment">with</span> <span class="comment">OpenSSL</span> <span class="comment">1</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">1e</span><span class="literal">-</span><span class="comment">fips</span> <span class="comment">11</span> <span class="comment">Feb</span> <span class="comment">2013</span>
<span class="comment">TLS</span> <span class="comment">SNI</span> <span class="comment">support</span> <span class="comment">enabled</span>
<span class="comment">configure</span> <span class="comment">arguments:</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/etc/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">sbin</span><span class="literal">-</span><span class="comment">path=/usr/sbin/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">conf</span><span class="literal">-</span><span class="comment">path=/etc/nginx/nginx</span><span class="string">.</span><span class="comment">conf</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">error</span><span class="literal">-</span><span class="comment">log</span><span class="literal">-</span><span class="comment">path=/var/log/nginx/error</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">log</span><span class="literal">-</span><span class="comment">path=/var/log/nginx/access</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">pid</span><span class="literal">-</span><span class="comment">path=/var/run/nginx</span><span class="string">.</span><span class="comment">pid</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">lock</span><span class="literal">-</span><span class="comment">path=/var/run/nginx</span><span class="string">.</span><span class="comment">lock</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">client</span><span class="literal">-</span><span class="comment">body</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/client_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">proxy</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/proxy_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">fastcgi</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/fastcgi_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">uwsgi</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/uwsgi_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">scgi</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/scgi_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group=nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_addition_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_sub_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_dav_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_flv_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_mp4_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gunzip_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gzip_static_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_random_index_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_secure_link_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_auth_request_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mail</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mail_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">file</span><span class="literal">-</span><span class="comment">aio</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">ipv6</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_spdy_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">cc</span><span class="literal">-</span><span class="comment">opt='</span><span class="literal">-</span><span class="comment">O2</span> <span class="literal">-</span><span class="comment">g</span> <span class="literal">-</span><span class="comment">pipe</span> <span class="literal">-</span><span class="comment">Wp</span><span class="string">,</span><span class="literal">-</span><span class="comment">D_FORTIFY_SOURCE=2</span> <span class="literal">-</span><span class="comment">fexceptions</span> <span class="literal">-</span><span class="comment">fstack</span><span class="literal">-</span><span class="comment">protector</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">param=ssp</span><span class="literal">-</span><span class="comment">buffer</span><span class="literal">-</span><span class="comment">size=4</span> <span class="literal">-</span><span class="comment">m64</span> <span class="literal">-</span><span class="comment">mtune=generic'</span>
</code></pre><h2 id="Nginx源码编译">Nginx源码编译</h2><p>相对于上述使用yum安装nginx，我更习惯编译源码安装。<br>在进行安装以前，需要安装pcre和zlib。</p>
<h3 id="pcre安装">pcre安装</h3><pre><code>[root<span class="constant">@localhost</span> etc]<span class="preprocessor"># cd /usr/local</span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.tar.gz</span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># tar -zxvf pcre-8.37.tar.gz </span>
[root<span class="constant">@localhost</span> pcre-<span class="number">8.37</span>]<span class="preprocessor"># cd pcre-8.37/</span>
[root<span class="constant">@localhost</span> pcre-<span class="number">8.37</span>]<span class="preprocessor"># ./configure </span>
[root<span class="constant">@localhost</span> pcre-<span class="number">8.37</span>]<span class="preprocessor"># make </span>
[root<span class="constant">@localhost</span> pcre-<span class="number">8.37</span>]<span class="preprocessor"># make install</span>
</code></pre><p>这样，pcre就算安装完成。</p>
<h3 id="zlib安装">zlib安装</h3><pre><code>[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># wget http://zlib.net/zlib-1.2.8.tar.gz</span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># tar -zxvcf zlib-1.2.8.tar.gz </span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># cd zlib-1.2.8/</span>
[root<span class="constant">@localhost</span> zlib-<span class="number">1.2</span><span class="number">.8</span>]<span class="preprocessor"># make &amp;&amp; make install</span>
</code></pre><p>OK，zlib也安装完毕。</p>
<h3 id="Nginx源码编译安装">Nginx源码编译安装</h3><p>接下来下载nginx源码，完成后续的安装和配置。</p>
<p>[root@localhost pcre-8.37]# cd /usr/local<br>[root@localhost local]# wget <a href="http://nginx.org/download/nginx-1.8.0.tar.gz" target="_blank" rel="external">http://nginx.org/download/nginx-1.8.0.tar.gz</a><br>[root@localhost local]# tar -zxvf nginx-1.8.0.tar.gz<br>[root@localhost local]# cd ./nginx-1.8.0/<br>[root@localhost nginx-1.8.0]# ./configure –prefix=/usr/local/nginx<br>[root@localhost nginx-1.8.0]# make &amp;&amp; make install</p>
<p>如果没有错误提示，则表示nginx编译安装完成。<br>现在键入命令/usr/local/nginx/sbin/nginx就可以启动nginx了。<br>另外，终止nginx的命令使用：/usr/local/nginx/sbin/nginx -s stop；进行nginx平滑重启使用命令/usr/local/nginx/sbin/nginx -s reload。</p>
<h1 id="PHP"><strong>PHP</strong></h1>]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇博客讲解了整个缓存流程中数据库部分的搭建，有了最基础的部分，现在可以搭建上层的内容了。</p>]]>
    
    </summary>
    
      <category term="Lua" scheme="http://eclipsesv.com/tags/Lua/"/>
    
      <category term="Mongodb" scheme="http://eclipsesv.com/tags/Mongodb/"/>
    
      <category term="Nginx" scheme="http://eclipsesv.com/tags/Nginx/"/>
    
      <category term="PHP" scheme="http://eclipsesv.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://eclipsesv.com/tags/Redis/"/>
    
      <category term="服务器" scheme="http://eclipsesv.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[服务器端缓存环境配置]]></title>
    <link href="http://eclipsesv.com/2015/07/31/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%BC%93%E5%AD%98%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://eclipsesv.com/2015/07/31/服务器端缓存环境配置/</id>
    <published>2015-07-31T15:39:02.000Z</published>
    <updated>2015-08-02T13:42:05.348Z</updated>
    <content type="html"><![CDATA[<h1 id="原材料"><strong>原材料</strong></h1><p>正所谓“巧妇难为无米之炊”，在进行服务器端缓存搭建之前，需要将整个流程所需的元素准备好。</p>
<ul>
<li><a href="http://nginx.org/" title="作为Web服务器的存在" target="_blank" rel="external">Nginx</a>作为Web服务器的存在</li>
<li><a href="https://www.mongodb.org/" title="磁盘数据库" target="_blank" rel="external">Mongodb</a>磁盘数据库</li>
<li><a href="http://www.lua.org/" title="与Nginx结合，进行服务器端的逻辑控制" target="_blank" rel="external">Lua</a>与Nginx结合，进行服务器端的逻辑控制</li>
<li><a href="http://redis.io/" title="高速缓存" target="_blank" rel="external">Redis</a>内存数据库，高速缓存</li>
<li><a href="http://www.php.net/" title="返回数据库信息给客户端" target="_blank" rel="external">PHP</a>读取磁盘数据库信息，返回给客户端</li>
</ul>
<a id="more"></a>
<h1 id="调料包"><strong>调料包</strong></h1><p>有了原材料，当然需要将它们融合在一起，才能烹调出美味，下面这些内容则可以称之为调料包：</p>
<ul>
<li><strong>Nginx的Lua扩展</strong><br><a href="http://luajit.org" target="_blank" rel="external">LuaJit</a><br><a href="https://github.com/simpl/ngx_devel_kit" target="_blank" rel="external">ngx_devel_kit</a><br><a href="https://github.com/chaoslawful/lua-nginx-module" target="_blank" rel="external">lua-nginx-module</a></li>
<li><strong>Nginx的Mongodb扩展</strong><br><a href="https://github.com/mdirolf/nginx-gridfs" target="_blank" rel="external">Nginx-gridfs</a></li>
<li><strong>PHP的Mongodb扩展</strong><br><a href="https://github.com/mongodb/mongo-php-driver" target="_blank" rel="external">Mongo-php-driver</a></li>
<li><a href="https://github.com/h4lflife/lua-resty-redis" target="_blank" rel="external"><strong>Lua的Redis扩展</strong></a></li>
</ul>
<h1 id="Mongodb的安装配置"><strong>Mongodb的安装配置</strong></h1><p>柿子先挑软的捏，整个流程中需要安装和配置的内容比较多，相比来说，Mongodb算是最简单的一个了。</p>
<h2 id="下载">下载</h2><p>在写这篇博客的时候，最新的Mongodb版本是<a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.0.5.tgz" target="_blank" rel="external">3.0.5</a>，下载的方法如下：</p>
<pre><code>[wangmeg@localhost ~]$ cd /usr/local
[wangmeg@localhost local]$ su
Password: 
[root@localhost local]<span class="preprocessor"># wget https:<span class="comment">//fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.0.5.tgz</span></span>
--<span class="number">2015</span>-<span class="number">08</span>-<span class="number">01</span> <span class="number">11</span>:<span class="number">06</span>:<span class="number">41</span>--  https:<span class="comment">//fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.0.5.tgz</span>
Resolving fastdl.mongodb.org (fastdl.mongodb.org)... <span class="number">54.230</span><span class="number">.156</span><span class="number">.11</span>, <span class="number">54.230</span><span class="number">.156</span><span class="number">.102</span>, <span class="number">54.230</span><span class="number">.156</span><span class="number">.123</span>, ...
Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|<span class="number">54.230</span><span class="number">.156</span><span class="number">.11</span>|:<span class="number">443.</span>.. connected.
HTTP request sent, awaiting response... <span class="number">200</span> OK
Length: <span class="number">50203367</span> (<span class="number">48</span>M) [application/x-gzip]
Saving to: ‘mongodb-linux-x86_64-rhel70-<span class="number">3.0</span><span class="number">.5</span>.tgz’

<span class="number">100</span>%[======================================&gt;] <span class="number">50</span>,<span class="number">203</span>,<span class="number">367</span>   <span class="number">582</span>KB/s   in <span class="number">4</span>m <span class="number">40</span>s 

<span class="number">2015</span>-<span class="number">08</span>-<span class="number">01</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">31</span> (<span class="number">175</span> KB/s) - ‘mongodb-linux-x86_64-rhel70-<span class="number">3.0</span><span class="number">.5</span>.tgz’ saved [<span class="number">50203367</span>/<span class="number">50203367</span>]
</code></pre><p>首先进入/usr/local目录，下载这个文件需要root权限，输入su之后，输入自己的root密码，使用wget命令，下载MongoDB到/usr/local目录下；<br>有的时候官网上资源不容易下载，提供下载地址<a href="http://yunpan.cn/cdARXPYP7FRPT" target="_blank" rel="external">MongoDB3.0.5点击下载，访问密码0cdf</a>。</p>
<h2 id="解压缩">解压缩</h2><pre><code>[root@localhost local]<span class="preprocessor"># tar zxvf mongodb-linux-x86_64-rhel70-<span class="number">3.0</span><span class="number">.5</span>.tgz </span>
[root@localhost local]<span class="preprocessor"># mv ./mongodb-linux-x86_64-rhel70-<span class="number">3.0</span><span class="number">.5</span> /usr/local/Mongodb3<span class="number">.0</span></span>
</code></pre><p>使用tar zxvf 解压缩*.tgz文件，mv 命令将解压缩后的文件夹重命名为Mongodb3.0；</p>
<h2 id="运行起来">运行起来</h2><p>在运行之前，需要建立两个文件夹：</p>
<pre><code>[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># cd Mongodb3.0/</span>
[root<span class="constant">@localhost</span> Mongodb3<span class="number">.0</span>]<span class="preprocessor"># mkdir ./db</span>
[root<span class="constant">@localhost</span> Mongodb3<span class="number">.0</span>]<span class="preprocessor"># mkdir ./log</span>
</code></pre><p>先进入/usr/local/Mongodb3.0文件夹：cd Mongodb3.0/ ，在当前文件夹中建立db和log文件夹。</p>
<pre><code>[root<span class="property">@localhost</span> Mongodb3.<span class="number">0</span>]<span class="comment"># cd ./bin/</span>
[root<span class="property">@localhost</span> bin]<span class="comment"># ls</span>
bsondump  mongodump    mongoimport  mongorestore  mongotop
mongo     mongoexport  mongooplog   mongos
mongod    mongofiles   mongoperf    mongostat
[root<span class="property">@localhost</span> bin]<span class="comment"># ./mongod --dbpath=../db --port=27017 --logpath=../log/mongodb.log --fork</span>
about <span class="keyword">to</span> fork child process, waiting <span class="keyword">until</span> server <span class="keyword">is</span> ready <span class="keyword">for</span> connections.
forked <span class="attribute">process</span>: <span class="number">12246</span>
child process started successfully, parent exiting
</code></pre><p>进入/usr/local/Mongodb3.0/bin/文件夹：cd ./bin/；<br>bin文件夹下mongod为mongodb启动文件，运行命令 ./mongod –dbpath=../db –port=27017 –logpath=../log/mongodb.log –fork 启动Mongodb。<br>–dbpath 代表Mongodb数据存储的位置； –port 表示Mongodb所占用的端口号； –logpath 表示日志文件的路径；–fork 表示Mongodb以守护进程的形式启动。<br>现在可以看到<br>about to fork child process, waiting until server is ready for connections.<br>forked process: 12246<br>child process started successfully, parent exiting<br>表示Mongodb已经正常启动！</p>
<h2 id="停止Mongodb">停止Mongodb</h2><p>按照上边的步骤，可以已守护进程的方式启动Mongodb，在需要停止Mongodb的时候，可以使用以下操作：</p>
<pre><code>[root@localhost bin]<span class="preprocessor"># ps -e | grep mongod</span>
 <span class="number">12246</span> ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">04</span> mongod
</code></pre><p>键入命令 ps -e | grep mongod，可以看到正在运行的Mongodb的pid（进程号）;</p>
<pre><code>[root<span class="constant">@localhost</span> bin]<span class="preprocessor"># kill 12246</span>
[root<span class="constant">@localhost</span> bin]<span class="preprocessor"># ps -e | grep mongod</span>
[root<span class="constant">@localhost</span> bin]<span class="preprocessor"># </span>
</code></pre><p>得到进程号之后，使用kill命令来停止Mongodb，再次输入ps -e | grep mongod 终端就不会再有显示，表示进程已被杀死。</p>
<h1 id="Redis_集群的搭建">Redis 集群的搭建</h1><p>这里需要说明以下，下载的时候选择支持集群模式的Redis3.0之后的版本。</p>
<h2 id="下载-1">下载</h2><p>跟Mongodb一样，第一步肯定是先把文件下载下来：</p>
<pre><code>[root@localhost bin]<span class="preprocessor"># cd /usr/local</span>
[root@localhost local]<span class="preprocessor"># wget http:<span class="comment">//download.redis.io/releases/redis-3.0.3.tar.gz</span></span>
--<span class="number">2015</span>-<span class="number">08</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">02</span>:<span class="number">27</span>--  http:<span class="comment">//download.redis.io/releases/redis-3.0.3.tar.gz</span>
Resolving download.redis.io (download.redis.io)... <span class="number">109.74</span><span class="number">.203</span><span class="number">.151</span>
Connecting to download.redis.io (download.redis.io)|<span class="number">109.74</span><span class="number">.203</span><span class="number">.151</span>|:<span class="number">80.</span>.. connected.
HTTP request sent, awaiting response... <span class="number">200</span> OK
Length: <span class="number">1360959</span> (<span class="number">1.3</span>M) [application/x-gzip]
Saving to: ‘redis-<span class="number">3.0</span><span class="number">.3</span>.tar.gz<span class="number">.1</span>’

<span class="number">100</span>%[======================================&gt;] <span class="number">1</span>,<span class="number">360</span>,<span class="number">959</span>    <span class="number">149</span>KB/s   in <span class="number">1</span>m <span class="number">41</span>s 

<span class="number">2015</span>-<span class="number">08</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">04</span>:<span class="number">20</span> (<span class="number">13.2</span> KB/s) - ‘redis-<span class="number">3.0</span><span class="number">.3</span>.tar.gz<span class="number">.1</span>’ saved [<span class="number">1360959</span>/<span class="number">1360959</span>]
</code></pre><p>相比Mongodb，Redis文件还是很小的。<br>同样，在下载失败的时候，可以<a href="http://yunpan.cn/cdABZJ4uNn7vQ" target="_blank" rel="external">点击下载Redis3.0.3 访问密码dc5a</a>。</p>
<h2 id="解压缩-1">解压缩</h2><pre><code><span class="attr_selector">[root@localhost local]</span># <span class="tag">tar</span> <span class="tag">-zxvf</span> <span class="tag">redis-3</span><span class="class">.0</span><span class="class">.3</span><span class="class">.tar</span><span class="class">.gz</span><span class="class">.1</span> 
</code></pre><p>将文件解压缩到/usr/local文件夹下。</p>
<h2 id="单独实例先Run起来">单独实例先Run起来</h2><p>这里与Mongodb不太一样，运行之前需要编译一下：</p>
<pre><code>[root@localhost local]<span class="preprocessor"># cd redis-<span class="number">3.0</span><span class="number">.3</span>/</span>
[root@localhost redis-<span class="number">3.0</span><span class="number">.3</span>]<span class="preprocessor"># make </span>
</code></pre><p>需要稍等一下，终端显示</p>
<pre><code><span class="attribute">Hint</span>: <span class="string">It's a good idea to run 'make test' ;)</span>

<span class="cpp">make[<span class="number">1</span>]: Leaving directory `/usr/local/redis-<span class="number">3.0</span><span class="number">.3</span>/src'</span>
</code></pre><p>则表示make成功。</p>
<pre><code>[root@localhost redis-<span class="number">3.0</span><span class="number">.3</span>]<span class="preprocessor"># cd src/</span>
[root@localhost src]<span class="preprocessor"># ./redis-server ../redis.conf </span>

<span class="number">16790</span>:M <span class="number">01</span> Aug <span class="number">13</span>:<span class="number">15</span>:<span class="number">44.020</span> * The server is now ready to accept connections on port <span class="number">6379</span>
</code></pre><p>进入src文件夹下，键入命令：./redis-server ../redis.conf ，就可以启动Redis实例。正常的运行结果则如上所示。</p>
<p>在这里，因为不是以守护进程的形式启动的Redis，如果需要停止进行，在运行Redis的终端使用Ctrl+C来停止进程。</p>
<pre><code>^C16790:signal-handler (<span class="number">1438406388</span>) Received SIGINT scheduling shutdown...
<span class="number">16790</span>:M <span class="number">01</span> Aug <span class="number">13</span>:<span class="number">19</span>:<span class="number">48.465</span> <span class="preprocessor"># User requested shutdown...</span>
<span class="number">16790</span>:M <span class="number">01</span> Aug <span class="number">13</span>:<span class="number">19</span>:<span class="number">48.465</span> * Saving the final RDB snapshot before exiting.
<span class="number">16790</span>:M <span class="number">01</span> Aug <span class="number">13</span>:<span class="number">19</span>:<span class="number">48.507</span> * DB saved on disk
<span class="number">16790</span>:M <span class="number">01</span> Aug <span class="number">13</span>:<span class="number">19</span>:<span class="number">48.507</span> <span class="preprocessor"># Redis is now ready to exit, bye bye...</span>
</code></pre><h2 id="Redis集群，High起来">Redis集群，High起来</h2><p>Redis作为一个内存数据库，在实际的使用环境中，经常会受到机器内存大小的限制，在3.0之前的版本，集群需要采用proxy的方法，现在redis自身提供了cluster的支持。</p>
<h3 id="集群搭建准备工作">集群搭建准备工作</h3><p>集群的搭建需要使用Redis下src文件夹中redis-trib.rb，这是一个ruby程序，因此需要系统中有ruby环境。</p>
<pre><code>root<span class="constant">@localhost</span> src]<span class="preprocessor"># yum install ruby </span>
[root<span class="constant">@localhost</span> src]<span class="preprocessor"># gem install redis</span>
</code></pre><p>键入上边的命令，安装ruby 和 ruby 的redis 扩展。在安装扩展的时候，很有可能不能安装，可能是资源被墙了。可以使用我自己下载到的资源<a href="http://yunpan.cn/cdABc69IzjVvG" target="_blank" rel="external">redis.gem 访问密码9727</a>进行本地安装。</p>
<pre><code>[root@localhost src]<span class="preprocessor"># gem install --local /usr/local/redis-<span class="number">3.0</span><span class="number">.0</span>.gem </span>
</code></pre><p>将下载到的gem文件放到/usr/local目录下，使用上边的命令进行安装。这样，Redis集群的运行环境就搭建完毕。</p>
<p>要做redis集群，至少需要3个Master实例。<br>先把redis的配置文件redis.conf和redis-server文件放到一个文件夹中：</p>
<pre><code>[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># cd /usr/local</span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># mkdir -p ./redis-cluster/6379</span>
[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># cp ./redis-3.0.3/redis.conf ./redis-3.0.3/src/redis-server ./redis-cluster/6379/</span>
</code></pre><p>然后将文件夹6379复制两份：</p>
<pre><code>[root<span class="constant">@localhost</span> <span class="keyword">local</span>]<span class="preprocessor"># cd ./redis-cluster/</span>
[root<span class="constant">@localhost</span> redis-cluster]<span class="preprocessor"># cp -rf ./6379/ ./6380</span>
[root<span class="constant">@localhost</span> redis-cluster]<span class="preprocessor"># cp -rf ./6379 ./6381</span>
</code></pre><p>接下来，需要作的就是修改对应文件夹下的redis.conf文件。</p>
<pre><code><span class="title">port</span> <span class="number">6379</span> <span class="comment">#不同目录，这里端口对应不同</span>
cluster-enabled <span class="built_in">yes</span> <span class="comment">#开启集群功能</span>
cluster-config-file nodes.conf <span class="comment">#节点配置文件，这个文件是服务启动时自己配置创建的</span>
cluster-node-timeout <span class="number">6000</span>
appendonly <span class="built_in">yes</span>
</code></pre><p>建议将conf文件中的save字段都屏蔽了，在使用过程中，发现开启之后，redis写rdb文件的时候对集群性能有很大影响。</p>
<h3 id="集群_走起">集群 走起</h3><p>上边的步骤，完成了集群搭建的准备工作。下边要开始运行起来了！<br>先把三个redis实例启动起来。</p>
<pre><code>[root@localhost src]<span class="preprocessor"># ps -ef | grep redis</span>
root      <span class="number">18979</span>  <span class="number">18297</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">24</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./redis-server *:<span class="number">6379</span> [cluster]
root      <span class="number">19094</span>  <span class="number">19057</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">25</span> pts/<span class="number">4</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./redis-server *:<span class="number">6380</span> [cluster]
root      <span class="number">19181</span>  <span class="number">19146</span>  <span class="number">0</span> <span class="number">14</span>:<span class="number">25</span> pts/<span class="number">7</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> ./redis-server *:<span class="number">6381</span> [cluster]
</code></pre><p>键入 ps -ef | grep redis 可以看到三个redis实例都在运行。<br>接下来使用redis-trib.rb来将三个实例连接起来。</p>
<pre><code>[root@localhost src]<span class="preprocessor"># cd /usr/local/redis-<span class="number">3.0</span><span class="number">.3</span>/src/</span>
[root@localhost src]<span class="preprocessor"># ./redis-trib.rb create --replicas <span class="number">0</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6380</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6381</span></span>
</code></pre><p>终端会有这样的显示：</p>
<pre><code>&gt;&gt;&gt; Performing hash slots allocation on 3 nodes...
Using 3 masters:
<span class="number">127.0.0.1</span>:6379
<span class="number">127.0.0.1</span>:6380
<span class="number">127.0.0.1</span>:6381
M: 4ee119039aebd<span class="number">0e1d48b3</span>f<span class="number">52149a7940</span>db34c6fb <span class="number">127.0.0.1</span>:6379
   slots:0-5460 (5461 slots) master
M: f6ad<span class="number">85a038a05</span>e<span class="number">297130f6e112</span>e223db54c47ea<span class="number">5 127.0.0</span>.1:6380
   slots:<span class="number">5461-10922</span> (5462 slots) master
M: <span class="number">0b97e4a7</span>f8e5ced<span class="number">1f2f247169</span>4b76dcf77ce1fc<span class="number">7 127.0.0</span>.1:6381
   slots:<span class="number">10923-16383</span> (5461 slots) master
Can I set the above configuration? (type 'yes' to accept):
</code></pre><p>键入 yes </p>
<pre><code><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Nodes</span> configuration updated
<span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Assign</span> a different config epoch to each node
<span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Sending</span> <span class="constant">CLUSTER</span> <span class="constant">MEET</span> messages to join the cluster
<span class="constant">Waiting</span> <span class="keyword">for</span> the cluster to join.
<span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Performing</span> <span class="constant">Cluster</span> <span class="constant">Check</span> (using node <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">6379</span>)
<span class="constant">M</span><span class="symbol">:</span> <span class="number">4</span>ee119039aebd0e1d48b3f52149a7940db34c6fb <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">6379</span>
   <span class="symbol">slots:</span><span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master
<span class="constant">M</span><span class="symbol">:</span> f6ad85a038a05e297130f6e112e223db54c47ea5 <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">6380</span>
   <span class="symbol">slots:</span><span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master
<span class="constant">M</span><span class="symbol">:</span> 0b97e4a7f8e5ced1f2f2471694b76dcf77ce1fc7 <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">6381</span>
   <span class="symbol">slots:</span><span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master
[<span class="constant">OK</span>] <span class="constant">All</span> nodes agree about slots configuration.
<span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Check</span> for open slots...
<span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Check</span> slots coverage...
[<span class="constant">OK</span>] <span class="constant">All</span> <span class="number">16384</span> slots covered.
</code></pre><p>测试一下，集群是否正常工作。</p>
<pre><code>[root@localhost src]<span class="preprocessor"># ./redis-cli -c -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span></span>
<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> key values
-&gt; Redirected to slot [<span class="number">12539</span>] located at <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6381</span>
OK
</code></pre><p>这样，集群就算搭建完成了。哈哈哈。</p>
<h1 id="未完待续">未完待续</h1><p>至此，整个服务器缓存流程中的数据库部分已经搭建完毕，接下来要配置的是Web服务器和PHP的安装配置，我会在后续的文章中继续更新。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="原材料"><strong>原材料</strong></h1><p>正所谓“巧妇难为无米之炊”，在进行服务器端缓存搭建之前，需要将整个流程所需的元素准备好。</p>
<ul>
<li><a href="http://nginx.org/" title="作为Web服务器的存在">Nginx</a>作为Web服务器的存在</li>
<li><a href="https://www.mongodb.org/" title="磁盘数据库">Mongodb</a>磁盘数据库</li>
<li><a href="http://www.lua.org/" title="与Nginx结合，进行服务器端的逻辑控制">Lua</a>与Nginx结合，进行服务器端的逻辑控制</li>
<li><a href="http://redis.io/" title="高速缓存">Redis</a>内存数据库，高速缓存</li>
<li><a href="http://www.php.net/" title="返回数据库信息给客户端">PHP</a>读取磁盘数据库信息，返回给客户端</li>
</ul>]]>
    
    </summary>
    
      <category term="Lua" scheme="http://eclipsesv.com/tags/Lua/"/>
    
      <category term="Mongodb" scheme="http://eclipsesv.com/tags/Mongodb/"/>
    
      <category term="Nginx" scheme="http://eclipsesv.com/tags/Nginx/"/>
    
      <category term="PHP" scheme="http://eclipsesv.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://eclipsesv.com/tags/Redis/"/>
    
      <category term="服务器" scheme="http://eclipsesv.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[送给自己]]></title>
    <link href="http://eclipsesv.com/2015/07/31/%E9%80%81%E7%BB%99%E8%87%AA%E5%B7%B1/"/>
    <id>http://eclipsesv.com/2015/07/31/送给自己/</id>
    <published>2015-07-31T07:17:09.000Z</published>
    <updated>2015-07-31T07:18:48.490Z</updated>
    <content type="html"><![CDATA[<p><strong>总有一天，你将破茧而出</strong><br><strong>成长的比人们期待的还要美丽</strong></p>
<p><strong>但这个过程会很痛</strong><br><strong>会很辛苦</strong></p>
<p><strong>面对着汹涌而来的现实</strong><br><strong>觉得自己渺小无力</strong></p>
<p><strong>但这 也是生命的一部分</strong><br><strong>做好现在你能做的 然后 一切都会好的</strong><br><strong>我们都将孤独地长大 不要害怕</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>总有一天，你将破茧而出</strong><br><strong>成长的比人们期待的还要美丽</strong></p>
<p><strong>但这个过程会很痛</strong><br><strong>会很辛苦</strong></p>
<p><strong>面]]>
    </summary>
    
      <category term="心情文字" scheme="http://eclipsesv.com/categories/%E5%BF%83%E6%83%85%E6%96%87%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[海量小文件服务器端缓存架构]]></title>
    <link href="http://eclipsesv.com/2015/07/31/%E6%B5%B7%E9%87%8F%E5%B0%8F%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    <id>http://eclipsesv.com/2015/07/31/海量小文件服务器端架构/</id>
    <published>2015-07-31T07:17:09.000Z</published>
    <updated>2015-08-01T02:25:39.635Z</updated>
    <content type="html"><![CDATA[<h1 id="写在前边">写在前边</h1><p>在仔细讲解服务器端架构之前，我需要先说明一下使用场景和遇到的问题：<br>数据请求是从一个使用<a href="http://osgearth.org/" target="_blank" rel="external">OSG-earth</a>开发的三维地球发出的，三维球跟据当前的视点高度和视口计算出需要的数据名，生成http请求，发送给服务器，服务器根据http请求中的数据名称，从磁盘数据库中检索数据，返回给客户端数据库检索结果，三维球得到数据，解析数据，并将其实时绘制出来。<a id="more"></a>总体的数据请求和返回就是这样，但是，服务器在得到请求之后，每次都从磁盘数据库中检索数据，而这一检索过程通常不止一遍（因为客户端可能重复观察同一片地区），在多用户使用的情况下，这种无用的时间消耗更是令人难以忍受。同时，多次检索同一条数据，也会增加服务器的I/O负载，浪费服务器资源。</p>
<h1 id="架构设计">架构设计</h1><h2 id="服务器端缓存架构">服务器端缓存架构</h2><p>为了避免多次对同一条数据的磁盘数据库检索，在服务器端构建一套缓存机制，可以有效避免这样的情况。<br>废话不多说，直接上图：<br><img src="http://7xkswi.com1.z0.glb.clouddn.com/eclipse_jpgserver_structure.jpg" alt="服务器端缓存架构" title="服务器缓存架构图"><br>在服务器端，增加内存数据<a href="http://redis.io/" title="Redis" target="_blank" rel="external">Redis</a>，作为缓存。借助Redis的优秀性能，在数据缓存到Redis之后，可以有效减少每条数据请求的时间消耗。</p>
<h2 id="服务器缓存时序图">服务器缓存时序图</h2><p>在服务器端，数据请求的流程可以由以下的时序图来说明：<br><img src="http://7xkswi.com1.z0.glb.clouddn.com/eclipse_jpgtime_stream.jpg" alt="服务器端时序图" title="服务器端缓存时序图"></p>
<h1 id="缓存效果">缓存效果</h1><p>在增加缓存机制前后，数据调度效率的对比如下所示：<br><img src="http://7xkswi.com1.z0.glb.clouddn.com/eclipse_jpgab.png" alt="增加缓存前后每条数据平均请求时间消耗" title="数据平均时间消耗"><br>使用三维球对同一区域进行绕点飞行，可以看到，在飞行的第一圈，数据缓存到Redis中有较多的时间消耗，第一圈飞行完毕之后，使用缓存的数据请求时间消耗明显小于未使用缓存的数据请求。</p>
<h1 id="未完待续">未完待续</h1><p>在接下来的几篇文章中，我会持续详细讲解这套缓存机制在服务器端包括<strong>Web服务器</strong>、<strong>消息中间件</strong>、<strong>MongoDB</strong>和<strong>Redis集群</strong>的内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="写在前边">写在前边</h1><p>在仔细讲解服务器端架构之前，我需要先说明一下使用场景和遇到的问题：<br>数据请求是从一个使用<a href="http://osgearth.org/">OSG-earth</a>开发的三维地球发出的，三维球跟据当前的视点高度和视口计算出需要的数据名，生成http请求，发送给服务器，服务器根据http请求中的数据名称，从磁盘数据库中检索数据，返回给客户端数据库检索结果，三维球得到数据，解析数据，并将其实时绘制出来。]]>
    
    </summary>
    
      <category term="Mongodb" scheme="http://eclipsesv.com/tags/Mongodb/"/>
    
      <category term="Nginx" scheme="http://eclipsesv.com/tags/Nginx/"/>
    
      <category term="Redis" scheme="http://eclipsesv.com/tags/Redis/"/>
    
      <category term="服务器" scheme="http://eclipsesv.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>